image: $REPO_URL/stage

services:
  - docker:dind

stages:
  - build
  - test
  - e2e
  - release
  - deployment

variables:
  DOCKER_HOST: tcp://localhost:2375/

###############################################################
# Build Stage (jobs inside a stage run in parallel)
###############################################################

build-linux:
  stage: build
  tags:
    - kube
  script:
    - docker pull $REPO_URL/polyswarm-client:latest
    - docker build -t $REPO_URL/polyswarm-client:$CI_COMMIT_SHA -f docker/Dockerfile --cache-from=$REPO_URL/polyswarm-client:latest .
    - docker push $REPO_URL/polyswarm-client:$CI_COMMIT_SHA


build-windows:
  stage: build
  tags:
    - win-participants
  script:
    - $env:DOCKER_HOST = ''
    - aws ecr get-login --no-include-email --region us-east-1 | Powershell
    - docker pull $REPO_URL/polyswarm-client-windows:latest
    - docker build -t $REPO_URL/polyswarm-client-windows:$CI_COMMIT_SHA -f docker/windows/Dockerfile --cache-from=$REPO_URL/polyswarm-client-windows:latest .
    - docker push $REPO_URL/polyswarm-client-windows:$CI_COMMIT_SHA

###############################################################
# Test Stage
###############################################################

test-linux:
  stage: test
  tags:
    - kube
  script:
    - docker pull $REPO_URL/polyswarm-client:$CI_COMMIT_SHA
    - docker run $REPO_URL/polyswarm-client:$CI_COMMIT_SHA tox

test-push-to-pypi:
  stage: test
  tags:
    - kube
  only:
    - tags
  script:
    # TODO: Maybe consider executing this inside the polyswarm-client image we just built
    - python setup.py sdist bdist_wheel
    # Using env variables from Gitlab: TWINE_USERNAME, TWINE_PASSWORD, TWINE_REPOSITORY_URL
    # Will try to upload on V.V.VrcN tags, but will not fail if the version already exists in test.pypi.org
    - twine upload --skip-existing --repository-url $TWINE_REPOSITORY_URL_TEST -u $TWINE_USERNAME_TEST -p $TWINE_PASSWORD_TEST dist/*

test-windows:
  stage: test
  tags:
    - win-participants
  script:
    - $env:DOCKER_HOST = ''
    - aws ecr get-login --no-include-email --region us-east-1 | Powershell
    - docker pull $REPO_URL/polyswarm-client-windows:$CI_COMMIT_SHA
    - docker run $REPO_URL/polyswarm-client-windows:$CI_COMMIT_SHA powershell -NoProfile -Command 'Set-Location C:/polyswarm/polyswarm-client; tox'

###############################################################
# Release Stage
###############################################################

release-tag-linux:
  stage: release
  tags:
    - kube
  only:
    - tags
  script:
    # Gets the current image that was built in the CI for this commit
    - docker pull $REPO_URL/polyswarm-client:$CI_COMMIT_SHA
    # Creates new tags for this image, one that should go to AWS and another to DockerHub with the tag from git
    - docker tag $REPO_URL/polyswarm-client:$CI_COMMIT_SHA $REPO_URL/polyswarm-client:$(git describe --tags --abbrev=0) polyswarm/polyswarm-client:$(git describe --tags --abbrev=0)
    # Pushes to AWS
    - docker push $REPO_URL/polyswarm-client:$(git describe --tags --abbrev=0)
    # Pushes to DockerHub
    - docker logout
    - docker login -u $CI_CUSTOM_DOCKER_HUB_USERNAME -p $CI_CUSTOM_DOCKER_HUB_PASSWORD
    - docker push polyswarm/polyswarm-client:$(git describe --tags --abbrev=0)

release-latest-linux:
  stage: release
  tags:
    - kube
  only:
    - master
  script:
    # Gets the current image that was built in the CI for this commit
    - docker pull $REPO_URL/polyswarm-client:$CI_COMMIT_SHA
    # Creates new tags for this image, one that should go to AWS and another to DockerHub with the tag "latest"
    - docker tag $REPO_URL/polyswarm-client:$CI_COMMIT_SHA $REPO_URL/polyswarm-client:latest polyswarm/polyswarm-client:latest
    # Pushes to AWS
    - docker push $REPO_URL/polyswarm-client:latest
    # Pushes to DockerHub
    - docker logout
    - docker login -u $CI_CUSTOM_DOCKER_HUB_USERNAME -p $CI_CUSTOM_DOCKER_HUB_PASSWORD
    - docker push polyswarm/polyswarm-client:latest

push-to-pypi:
  stage: release
  tags:
    - kube
  only:
    - tags
  script:
    - python setup.py sdist bdist_wheel

    # check git tag version vs setup.py version. bail if not equal.
    - >-
      tagver=$(git describe --abbrev=0 --tags)
      setupver=$(grep "version=" setup.py | cut -d"'" -f 2)

      if [ $tagver != $setupver ]; then
        echo "git tag version ($tagver) does not match setup.py version ($setupver)"
        exit 1
      fi

    # using env variables from Gitlab: TWINE_USERNAME, TWINE_PASSWORD, TWINE_REPOSITORY_URL
    - twine upload dist/*

release-tag-windows:
  stage: release
  tags:
    - win-participants
  only:
    - tags
  script:
    - $env:DOCKER_HOST = ''
    - aws ecr get-login --no-include-email --region us-east-1 | Powershell
    # Gets the current image that was built in the CI for this commit
    - docker pull "$REPO_URL/polyswarm-client-windows:$CI_COMMIT_SHA"
    # Creates new tags for this image, one that should go to AWS and another to DockerHub with the tag from git
    - docker tag "$REPO_URL/polyswarm-client-windows:$CI_COMMIT_SHA" "$REPO_URL/polyswarm-client:$(git describe --tags --abbrev=0)" "polyswarm/polyswarm-client-windows:$(git describe --tags --abbrev=0)"
    # Pushes to AWS
    - docker push "$REPO_URL/polyswarm-client:$(git describe --tags --abbrev=0)"
    # Pushes to DockerHub
    - docker logout
    - docker login -u "$CI_CUSTOM_DOCKER_HUB_USERNAME" -p "$CI_CUSTOM_DOCKER_HUB_PASSWORD"
    - docker push "polyswarm/polyswarm-client-windows:$(git describe --tags --abbrev=0)"

release-latest-windows:
  stage: release
  tags:
    - win-participants
  only:
    - master
  script:
    - $env:DOCKER_HOST = ''
    - aws ecr get-login --no-include-email --region us-east-1 | Powershell
    # Gets the current image that was built in the CI for this commit
    - docker pull "$REPO_URL/polyswarm-client-windows:$CI_COMMIT_SHA"
    # Creates new tags for this image, one that should go to AWS and another to DockerHub with the tag "latest"
    - docker tag "$REPO_URL/polyswarm-client-windows:$CI_COMMIT_SHA" "$REPO_URL/polyswarm-client:latest" "polyswarm/polyswarm-client-windows:latest"
    # Pushes to AWS
    - docker push "$REPO_URL/polyswarm-client:latest"
    # Pushes to DockerHub
    - docker logout
    - docker login -u "$CI_CUSTOM_DOCKER_HUB_USERNAME" -p "$CI_CUSTOM_DOCKER_HUB_PASSWORD"
    - docker push "polyswarm/polyswarm-client-windows:latest"

###############################################################
# Deployment Stage
###############################################################

notify-engines:
  stage: deployment
  only:
    - master
  script:
    - python3 kick_downstream.py
