image: docker:stable

services:
  - docker:dind

stages:
  - test
  - e2e
  - prebuildwindows
  - notifydependents
  - pypi

test:
  image: python:3.5
  stage: test
  before_script:
    - pip install tox
  script:
    - tox -e py35

kick-e2e:
  tags:
      - docker
  before_script:
    - apk --no-cache add curl jq

  stage: e2e
  script:
    - set -e

    # kick e2e
    - >-
      E2E_PIPELINE_ID=`curl
      --silent
      --request POST
      --form "token=$CI_JOB_TOKEN"
      --form "variables[SOURCE_PROJECT]=$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME"
      --form "variables[SOURCE_BRANCH]=$CI_COMMIT_REF_NAME"
      --form ref="master"
      "https://gitlab.polyswarm.io/api/v4/projects/${CI_CUSTOM_PROJECT_ID_E2E}/trigger/pipeline" | jq -r ".id"`

    # poll for it to finish
    - >-
      while [ -z $PIPELINE_STATUS ] || [ $PIPELINE_STATUS = "pending" ] || [ $PIPELINE_STATUS = "running" ]; do
        PIPELINE_STATUS=`curl \
          --silent \
          --header "PRIVATE-TOKEN: $CI_CUSTOM_CI_PAT" \
          "https://gitlab.polyswarm.io/api/v4/projects/${CI_CUSTOM_PROJECT_ID_E2E}/pipelines/$E2E_PIPELINE_ID" | jq -r ".status"`
        echo "waiting for e2e pipeline ...";
        sleep 5;
      done

    # check for success
    - >-
      if [ $PIPELINE_STATUS != "success" ]; then
        echo "failure further down the pipeline"
        exit 1
      fi

wheels:
  stage: prebuildwindows
  tags:
    - win2k16
  only:
    - feature/windows-builds
    - master
  script:
    - docker build -t polyswarm/windows-builder -f docker/windows/choco/Dockerfile .
    - docker run --rm -e "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" -e "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" -t polyswarm/windows-builder

kickafterpacker:
  before_script:
    - apk --no-cache add py3-requests
  stage: notifydependents
  only:
    - feature/windows-builds
    - master
  script:
    - python3 kick_downstream.py

push-to-pypi:
  image: python:3.5
  stage: pypi
  only:
    - tags
  before_script:
    - pip install --upgrade setuptools wheel twine
  script:
    - python setup.py sdist bdist_wheel

    # check git tag version vs setup.py version. bail if not equal.
    - >-
      tagver=$(git describe --abbrev=0 --tags)
      setupver=$(grep "version=" setup.py | cut -d"'" -f 2)

      if [ $tagver != $setupver ]; then
        echo "git tag version ($tagver) does not match setup.py version ($setupver)"
        exit 1
      fi

    # using env variables from Gitlab: TWINE_USERNAME, TWINE_PASSWORD, TWINE_REPOSITORY_URL
    - twine upload dist/*
